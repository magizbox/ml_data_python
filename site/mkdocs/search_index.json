{
    "docs": [
        {
            "location": "/", 
            "text": "DataScience with Python\n\n\nTools\n\n\n\n\npandas\n\n\nsklearn\n\n\n\n\nTable of contents\n\n\n\n\nData IO\n\n\nData Preparation\n\n\nData Transformation\n\n\nExplore Data Analysis\n\n\n\n\nInstallation\n\n\nUbuntu\n\n\n# install pip\nsudo apt-get install python-pip\n# numpy scipy notebook\nsudo apt-get install python-numpy python-scipy python-matplotlib python-pandas python-sympy python-nose\n# scikit-learn\npip install jupyter ipython\npip install -U scikit-learn", 
            "title": "Home"
        }, 
        {
            "location": "/#datascience-with-python", 
            "text": "", 
            "title": "DataScience with Python"
        }, 
        {
            "location": "/#tools", 
            "text": "pandas  sklearn", 
            "title": "Tools"
        }, 
        {
            "location": "/#table-of-contents", 
            "text": "Data IO  Data Preparation  Data Transformation  Explore Data Analysis", 
            "title": "Table of contents"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#ubuntu", 
            "text": "# install pip\nsudo apt-get install python-pip\n# numpy scipy notebook\nsudo apt-get install python-numpy python-scipy python-matplotlib python-pandas python-sympy python-nose\n# scikit-learn\npip install jupyter ipython\npip install -U scikit-learn", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/io/", 
            "text": "Data IO\n\n\nThis post shows how to import data to Python from numerous resources\n\n\nCSV\n\n\nRead a csv file from local or from a server\n\n\nimport numpy as np\nimport pandas as pd\n# read data\ndf = pd.read_csv('data.csv', header = 0)\n# write data\ndf.to_csv('data.csv', header=1, index=False)\n\n\n\n\nExcel\n\n\nref \n1\n\n\nimport pandas as pd\n# read data\ndf = pd.read_excel('data.xls')\n\n\n\n\nSqlite\n\n\nref \n2\n \n3\n\n\nimport sqlite3\n\nDB_NAME = \ndb.sqlite3\n\nSELECT_QUERY = \nSELECT page_id, type FROM service_page\n\n# connect to sqlite3\ndb_connector = sqlite3.connect(DB_NAME)\n# excute query\ncursor = db_connector.execute(SELECT_QUERY)\n# return dataset\ndata_set = cursor.fetchall()\n\n\n\n\n\n\n\n\n\n\n\n\npandas.read_excel\n\n\n\n\n\n\npandas.read_sqlite\n\n\n\n\n\n\nsqlite3.read_sqlite", 
            "title": "IO"
        }, 
        {
            "location": "/io/#data-io", 
            "text": "This post shows how to import data to Python from numerous resources", 
            "title": "Data IO"
        }, 
        {
            "location": "/io/#csv", 
            "text": "Read a csv file from local or from a server  import numpy as np\nimport pandas as pd\n# read data\ndf = pd.read_csv('data.csv', header = 0)\n# write data\ndf.to_csv('data.csv', header=1, index=False)", 
            "title": "CSV"
        }, 
        {
            "location": "/io/#excel", 
            "text": "ref  1  import pandas as pd\n# read data\ndf = pd.read_excel('data.xls')", 
            "title": "Excel"
        }, 
        {
            "location": "/io/#sqlite", 
            "text": "ref  2   3  import sqlite3\n\nDB_NAME =  db.sqlite3 \nSELECT_QUERY =  SELECT page_id, type FROM service_page \n# connect to sqlite3\ndb_connector = sqlite3.connect(DB_NAME)\n# excute query\ncursor = db_connector.execute(SELECT_QUERY)\n# return dataset\ndata_set = cursor.fetchall()      pandas.read_excel    pandas.read_sqlite    sqlite3.read_sqlite", 
            "title": "Sqlite"
        }, 
        {
            "location": "/preparation/", 
            "text": "Preperation\n\n\nNormalization\n\n\nref \n1\n\n\nimport numpy\nfrom sklearn.preprocessing import normalize\nmatrix = numpy.arange(0,27,3).reshape(3,3).astype(numpy.float64)\n\n# array([[  0.,   3.,   6.],\n#   [  9.,  12.,  15.],\n#   [ 18.,  21.,  24.]])\n\nnormed_matrix = normalize(matrix, axis=1, norm='l1')\n\n# [[ 0.          0.33333333  0.66666667]\n# [ 0.25        0.33333333  0.41666667]\n# [ 0.28571429  0.33333333  0.38095238]]\n\n\n\n\nLabel Encoder\n\n\nref \n2\n\n\nEncode labels (categorical variables) with value between 0 and n_classes-1.\n\n\nimport sklearn\nle = sklearn.preprocessing.LabelEncoder()\nle.fit([\nparis\n, \nparis\n, \ntokyo\n, \namsterdam\n])\n# LabelEncoder()\nlist(le.classes_)\n# ['amsterdam', 'paris', 'tokyo']\nle.transform([\ntokyo\n, \ntokyo\n, \nparis\n])\n# array([2, 2, 1]...)\nlist(le.inverse_transform([2, 2, 1]))\n# ['tokyo', 'tokyo', 'paris']\n\n\n\n\n\n\n\n\n\n\n\n\nHow to normalize a 2-dimensional numpy array in python less verbose?\n\n\n\n\n\n\nsklearn.preprocessing.LabelEncoder", 
            "title": "Preparation"
        }, 
        {
            "location": "/preparation/#preperation", 
            "text": "", 
            "title": "Preperation"
        }, 
        {
            "location": "/preparation/#normalization", 
            "text": "ref  1  import numpy\nfrom sklearn.preprocessing import normalize\nmatrix = numpy.arange(0,27,3).reshape(3,3).astype(numpy.float64)\n\n# array([[  0.,   3.,   6.],\n#   [  9.,  12.,  15.],\n#   [ 18.,  21.,  24.]])\n\nnormed_matrix = normalize(matrix, axis=1, norm='l1')\n\n# [[ 0.          0.33333333  0.66666667]\n# [ 0.25        0.33333333  0.41666667]\n# [ 0.28571429  0.33333333  0.38095238]]", 
            "title": "Normalization"
        }, 
        {
            "location": "/preparation/#label-encoder", 
            "text": "ref  2  Encode labels (categorical variables) with value between 0 and n_classes-1.  import sklearn\nle = sklearn.preprocessing.LabelEncoder()\nle.fit([ paris ,  paris ,  tokyo ,  amsterdam ])\n# LabelEncoder()\nlist(le.classes_)\n# ['amsterdam', 'paris', 'tokyo']\nle.transform([ tokyo ,  tokyo ,  paris ])\n# array([2, 2, 1]...)\nlist(le.inverse_transform([2, 2, 1]))\n# ['tokyo', 'tokyo', 'paris']      How to normalize a 2-dimensional numpy array in python less verbose?    sklearn.preprocessing.LabelEncoder", 
            "title": "Label Encoder"
        }, 
        {
            "location": "/transformation/", 
            "text": "Transformation\n\n\nCreate data frame\n\n\nref \n1\n\n\nimport pandas as pd\nstudents = pd.DataFrame({\n  'name' : [\nKate\n, \nJohn\n, \nTom\n, \nMark\n],\n  'age' : [20, 21, 19, 18]})\n\n#       age  name\n#    0   20  Kate\n#    1   21  John\n#    2   19   Tom\n#    3   18  Mark\n\n\n\n\nLoad dataframe\n\n\nimport pandas as pd\nfrom sklearn import datasets\niris_data = datasets.load_iris()\niris = pd.DataFrame(data=iris_data.data, columns=iris_data.feature_names)\niris\n\n\n\n\nSelection\n\n\nstudents.iloc[1:3, :]\n#       age  name\n#    1   21  John\n#    2   19   Tom\n\n\n\n\nCreate new column\n\n\nstudents[\nbirthyear\n] = students.apply(lambda row: 2016 - row['age'], axis=1)\nstudents[\nbirthyear\n] = 2016 - students[\nage\n]\n\n#       age  name  birthyear\n#    0   20  Kate       1996\n#    1   21  John       1995\n#    2   19   Tom       1997\n#    3   18  Mark       1998\n\n\n\n\nDelete column\n\n\nstudents = students.drop('birthyear', 1)\n\n\n\n\n\n\nWes McKinney, 10-minute tour of pandas: \nvideo\n, \nnotebook\n\n\n\n\n\n\n\n\n\n\n\n\nDataFrame, Intro to Data Structures", 
            "title": "Transformation"
        }, 
        {
            "location": "/transformation/#transformation", 
            "text": "", 
            "title": "Transformation"
        }, 
        {
            "location": "/transformation/#create-data-frame", 
            "text": "ref  1  import pandas as pd\nstudents = pd.DataFrame({\n  'name' : [ Kate ,  John ,  Tom ,  Mark ],\n  'age' : [20, 21, 19, 18]})\n\n#       age  name\n#    0   20  Kate\n#    1   21  John\n#    2   19   Tom\n#    3   18  Mark", 
            "title": "Create data frame"
        }, 
        {
            "location": "/transformation/#load-dataframe", 
            "text": "import pandas as pd\nfrom sklearn import datasets\niris_data = datasets.load_iris()\niris = pd.DataFrame(data=iris_data.data, columns=iris_data.feature_names)\niris", 
            "title": "Load dataframe"
        }, 
        {
            "location": "/transformation/#selection", 
            "text": "students.iloc[1:3, :]\n#       age  name\n#    1   21  John\n#    2   19   Tom", 
            "title": "Selection"
        }, 
        {
            "location": "/transformation/#create-new-column", 
            "text": "students[ birthyear ] = students.apply(lambda row: 2016 - row['age'], axis=1)\nstudents[ birthyear ] = 2016 - students[ age ]\n\n#       age  name  birthyear\n#    0   20  Kate       1996\n#    1   21  John       1995\n#    2   19   Tom       1997\n#    3   18  Mark       1998", 
            "title": "Create new column"
        }, 
        {
            "location": "/transformation/#delete-column", 
            "text": "students = students.drop('birthyear', 1)   Wes McKinney, 10-minute tour of pandas:  video ,  notebook       DataFrame, Intro to Data Structures", 
            "title": "Delete column"
        }
    ]
}